import requests
import json
import argparse
class NessusClient():
    def __init__(self,nessusServer,nessusPort):
        self.nessusServer=nessusServer
        self.nessusPort=nessusPort
        self.url='https://'+str(nessusServer)+':'+str(nessusPort)
        self.token=None  #token is a piece of data which authenticates an application or user.This tells the server that the request is coming from a verified source.
        #3 types of tokens 
        # 1)Session Token->stored on client and server used to maintain user sessions
        #  2)JWT(JSON WEB TOKEN) this is self contained encoded and signed piece of data it holds information related to user identity expiry time and user roles or permissions it is signed by a server using a secret key (private key fomed using asymmetric encryption) to prevent tampering.
        # 3) API TOKEN ---> random or hashed string that uniquely identifies a user or application when interacting with an API Unlike JWT, it usually doesn’t contain user info or claims; it's just a secret value stored on the server side and mapped to a user/app.Key Features:Often long-lived (e.g., used in API keys for external integrations).Stored securely on the server, not meant to be decoded by clients.Acts as a password for the API.
        self.headers={} #HTTP headers are key-value pairs sent at the start of every HTTP request and HTTP response. They carry metadata — information about the request or response but not the actual content (like HTML or JSON body).
        self.bodyRequest={} #bodyRequest (or often named requestBody, data, etc.) refers to the actual data that you send to the server inside the HTTP request body, especially in:POST requests (e.g., when submitting a login form) PUT / PATCH (e.g., when updating something)Sometimes in DELETE (though body is rarely used here)
    def get_request(self,url):
        response=requests.get(url,data=self.bodyRequest,headers=self.headers,verify=False) #verify=False ----> disable ssl certificate verification
        return json.loads(response.content) #json.loads()--->Converts a JSON string into a Python dictionary
    def post_request(self,url):
        response=requests.post(url,data=self.bodyRequest,headers=self.headers,verify=False)
        return json.loads(response.content)
    def request_api(self,service,params={}):
        self.headers={'Host':str(self.nessusServer)+':'+str(self.nessusPort),'Content-type':'application/x-www-form-urlencoded','X-Cookie':'token='+self.token}
        print(self.headers)
        content=self.get_request(self.url+service)
        return content
    def login(self,nessusUser,nessusPassword):
        headers={'Host':str(self.nessusServer)+':'+str(self.nessusPort),
                 'Contemt type':'application/x-www-form-urlencoded'}
        params={'username':nessusUser,'password':nessusPassword}
        self.bodyRequest.update(params)
        self.headers.update(headers)   #.update() is a built-in Python dictionary method that adds key-value pairs from one dictionary to another. If a key already exists, it updates (overwrites) the value.
#In self.headers.update(headers):
#self.headers is your existing headers dictionary (e.g., { "Authorization": "Bearer abc" })
#headers is another dictionary you want to add or merge into it.
#.update() merges them.
        print(self.headers)
        content=self.post_request(self.url+"/session")
        if "token" in content:
            self.token=content['token']
        return content
parser=argparse.ArgumentParser()
parser.add_argument('--user',required=True)
parser.add_argument('--password',required=True)
args=parser.parse_args()
user=args.user
password=args.password
client=NessusClient('127.0.0.1','8834')
client.login(user,password)
print(client.request_api('/server/status'))
scans=client.request_api('/scans')['scans']
print(scans)
for scan in scans:
    vulnerabilities=client.request_api('/scans/'+str(scan['id']))['vulnerabilities'] 
    for vuln in vulnerabilities:
        print(vuln['plugin_family'],vuln['plugin_name'])
           
    